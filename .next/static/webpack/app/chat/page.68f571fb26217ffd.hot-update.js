"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./components/slack-interface.tsx":
/*!****************************************!*\
  !*** ./components/slack-interface.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SlackInterface; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sidebar */ \"(app-pages-browser)/./components/sidebar.tsx\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header */ \"(app-pages-browser)/./components/header.tsx\");\n/* harmony import */ var _channel_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./channel-view */ \"(app-pages-browser)/./components/channel-view.tsx\");\n/* harmony import */ var _thread_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./thread-view */ \"(app-pages-browser)/./components/thread-view.tsx\");\n/* harmony import */ var _search_results__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./search-results */ \"(app-pages-browser)/./components/search-results.tsx\");\n/* harmony import */ var _select_user_dialog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./select-user-dialog */ \"(app-pages-browser)/./components/select-user-dialog.tsx\");\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./lib/api.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nfunction SlackInterface() {\n    var _channels_find, _channels_find1;\n    _s();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams)();\n    const username = searchParams.get(\"username\");\n    const [channels, setChannels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedChannel, setSelectedChannel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedThread, setSelectedThread] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [channelMessages, setChannelMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [dmMessages, setDMMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedDirectMessage, setSelectedDirectMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isSelectUserDialogOpen, setIsSelectUserDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedAvatar, setSelectedAvatar] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [existingDMs, setExistingDMs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // Fetch initial data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchInitialData = async ()=>{\n            try {\n                const [channelsData, usersData] = await Promise.all([\n                    _lib_api__WEBPACK_IMPORTED_MODULE_9__.getChannels(),\n                    _lib_api__WEBPACK_IMPORTED_MODULE_9__.getUsers()\n                ]);\n                setChannels(channelsData);\n                setUsers(usersData);\n                if (channelsData.length > 0) {\n                    setSelectedChannel(channelsData[0].id);\n                }\n                // Set current user (in a real app, this would come from authentication)\n                if (username) {\n                    const existingUser = usersData.find((u)=>u.name === username);\n                    if (existingUser) {\n                        setCurrentUser(existingUser);\n                        // Fetch existing DM pairs for the user\n                        const dmPairs = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getDMPairs(existingUser.id);\n                        setExistingDMs(dmPairs);\n                    } else {\n                        // Create a new user with the provided username\n                        const newUser = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createUser({\n                            name: username,\n                            status: \"online\",\n                            statusMessage: \"\"\n                        });\n                        setCurrentUser(newUser);\n                        setUsers((prev)=>[\n                                ...prev,\n                                newUser\n                            ]);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch initial data:\", error);\n            }\n        };\n        fetchInitialData();\n    }, []);\n    // Fetch messages when selected channel changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchMessages = async ()=>{\n            if (!selectedChannel || !currentUser) return;\n            try {\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(selectedChannel);\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch messages:\", error);\n            }\n        };\n        fetchMessages();\n    }, [\n        selectedChannel,\n        currentUser\n    ]);\n    // Fetch DM messages when selected user changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchDMMessages = async ()=>{\n            if (!selectedDirectMessage || !currentUser) return;\n            try {\n                // Find the selected user's ID\n                const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                if (!selectedUser) return;\n                // Sort user IDs to ensure consistent dmPairId regardless of who's viewing\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(undefined, dmPairId);\n                // Store messages using the same dmPairId as the key\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch DM messages:\", error);\n            }\n        };\n        fetchDMMessages();\n    }, [\n        selectedDirectMessage,\n        currentUser,\n        users\n    ]);\n    // Fetch avatar chat messages when selected avatar changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchAvatarMessages = async ()=>{\n            if (!selectedAvatar || !currentUser) return;\n            try {\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(undefined, undefined, selectedAvatar);\n                const avatarKey = \"avatar_\".concat(selectedAvatar);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [avatarKey]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch avatar messages:\", error);\n            }\n        };\n        fetchAvatarMessages();\n    }, [\n        selectedAvatar,\n        currentUser\n    ]);\n    const handleSearch = (query)=>{\n        if (query.trim() === \"\") {\n            setSearchResults(null);\n            return;\n        }\n        const lowercaseQuery = query.toLowerCase();\n        const allMessages = [\n            ...Object.values(channelMessages).flat(),\n            ...Object.values(dmMessages).flat()\n        ];\n        const results = allMessages.filter((message)=>{\n            const contentMatch = message.content.toLowerCase().includes(lowercaseQuery);\n            const filenameMatch = message.file && message.file.name.toLowerCase().includes(lowercaseQuery);\n            return contentMatch || filenameMatch;\n        });\n        setSearchResults(results);\n    };\n    const handleSearchResultClick = (result)=>{\n        // Find the channel or DM containing this message\n        for (const [channel, messages] of Object.entries(channelMessages)){\n            if (messages.some((m)=>m.id === result.id)) {\n                setSelectedChannel(channel);\n                setSelectedDirectMessage(null);\n                setSearchResults(null);\n                return;\n            }\n        }\n        for (const [dmKey, messages] of Object.entries(dmMessages)){\n            if (messages.some((m)=>m.id === result.id)) {\n                const [user1, user2] = dmKey.split(\"_\");\n                const otherUser = user1 === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) ? user2 : user1;\n                setSelectedDirectMessage(otherUser);\n                setSelectedChannel(\"\");\n                setSearchResults(null);\n                return;\n            }\n        }\n    };\n    const handleSendMessage = async (content, file)=>{\n        if (!currentUser) return;\n        try {\n            let fileData;\n            if (file) {\n                // Create FormData and append file\n                const formData = new FormData();\n                formData.append(\"file\", file);\n                formData.append(\"filename\", file.name);\n                // Upload file first\n                const uploadResponse = await fetch(\"/api/files/upload\", {\n                    method: \"POST\",\n                    body: formData\n                });\n                if (!uploadResponse.ok) {\n                    const error = await uploadResponse.json();\n                    throw new Error(error.details || \"Failed to upload file\");\n                }\n                const { fileUrl } = await uploadResponse.json();\n                // Create file data structure\n                fileData = {\n                    name: file.name,\n                    type: file.type,\n                    url: fileUrl\n                };\n            }\n            // Update user status to show activity\n            if (currentUser && selectedAvatar) {\n                await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                    status: \"active\",\n                    statusMessage: \"Chatting with \".concat(selectedAvatar)\n                });\n                setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                            ...user,\n                            status: \"active\",\n                            statusMessage: \"Chatting with \".concat(selectedAvatar)\n                        } : user));\n            }\n            // Find the selected user's ID for DMs\n            const selectedUser = selectedDirectMessage ? users.find((u)=>u.name === selectedDirectMessage) : null;\n            // Construct message data\n            const messageData = {\n                content,\n                userId: currentUser.id,\n                ...selectedChannel ? {\n                    channelId: selectedChannel\n                } : {},\n                ...selectedDirectMessage && selectedUser ? {\n                    dmPairId: \"\".concat([\n                        currentUser.id,\n                        selectedUser.id\n                    ].sort()[0], \"_\").concat([\n                        currentUser.id,\n                        selectedUser.id\n                    ].sort()[1])\n                } : {},\n                ...selectedAvatar ? {\n                    avatarId: selectedAvatar\n                } : {},\n                ...fileData ? {\n                    file: fileData\n                } : {}\n            };\n            const newMessage = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.sendMessage(messageData);\n            if (selectedChannel) {\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: [\n                            ...prev[selectedChannel] || [],\n                            newMessage\n                        ]\n                    }));\n            } else if (selectedDirectMessage && selectedUser) {\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: [\n                            ...prev[dmPairId] || [],\n                            newMessage\n                        ]\n                    }));\n            } else if (selectedAvatar) {\n                // Handle avatar chat messages\n                const avatarKey = \"avatar_\".concat(selectedAvatar);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [avatarKey]: [\n                            ...prev[avatarKey] || [],\n                            newMessage\n                        ]\n                    }));\n            }\n        } catch (error) {\n            console.error(\"Failed to send message:\", error);\n        }\n    };\n    const handleReaction = async (messageId, emoji)=>{\n        if (!currentUser) return;\n        try {\n            await _lib_api__WEBPACK_IMPORTED_MODULE_9__.toggleReaction({\n                messageId,\n                userId: currentUser.id,\n                emoji\n            });\n            // Update the UI optimistically\n            const updateMessages = (messages)=>messages.map((msg)=>msg.id === messageId ? {\n                        ...msg,\n                        reactions: msg.reactions.includes(emoji) ? msg.reactions.filter((r)=>r !== emoji) : [\n                            ...msg.reactions,\n                            emoji\n                        ]\n                    } : msg);\n            if (selectedChannel) {\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: updateMessages(prev[selectedChannel] || [])\n                    }));\n            } else if (selectedDirectMessage) {\n                const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                if (!selectedUser) return;\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: updateMessages(prev[dmPairId] || [])\n                    }));\n            }\n        } catch (error) {\n            console.error(\"Failed to toggle reaction:\", error);\n        }\n    };\n    const handleAddChannel = async (name)=>{\n        try {\n            console.log(\"Attempting to create channel:\", name);\n            const newChannel = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createChannel(name);\n            console.log(\"Channel created successfully:\", newChannel);\n            setChannels((prev)=>[\n                    ...prev,\n                    newChannel\n                ]);\n            setSelectedChannel(newChannel.id);\n        } catch (error) {\n            console.error(\"Failed to create channel:\", error);\n        }\n    };\n    const handleAddDirectMessage = async (userName)=>{\n        if (!currentUser) return;\n        try {\n            // Find the selected user\n            const selectedUser = users.find((u)=>u.name === userName);\n            if (!selectedUser) return;\n            // Create a channel name for the DM that's consistent regardless of who creates it\n            const participants = [\n                currentUser.name,\n                userName\n            ].sort();\n            const channelName = \"dm_\".concat(participants.join(\"_\"));\n            // Check if the channel already exists\n            const existingChannel = channels.find((c)=>c.name === channelName);\n            if (existingChannel) {\n                setSelectedChannel(existingChannel.id);\n                setSelectedDirectMessage(userName);\n                return;\n            }\n            // Create a new channel for the DM\n            const newChannel = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createChannel(channelName);\n            setChannels((prev)=>[\n                    ...prev,\n                    newChannel\n                ]);\n            setSelectedChannel(newChannel.id);\n            setSelectedDirectMessage(userName);\n            // Add to existing DMs list\n            setExistingDMs((prev)=>[\n                    ...prev,\n                    {\n                        userName\n                    }\n                ]);\n        } catch (error) {\n            console.error(\"Failed to create DM channel:\", error);\n        }\n    };\n    // Update the SelectUserDialog handler\n    const handleSelectUser = (userName)=>{\n        handleAddDirectMessage(userName);\n        setIsSelectUserDialogOpen(false);\n    };\n    // Add handleLogout function\n    const handleLogout = ()=>{\n        // Close any open dialogs\n        setIsSelectUserDialogOpen(false);\n        // Clear user state\n        setCurrentUser(null);\n        setChannelMessages({});\n        setDMMessages({});\n        setSelectedChannel(\"\");\n        setSelectedDirectMessage(null);\n        setSelectedThread(null);\n        setSearchResults(null);\n        // Redirect to login page\n        router.push(\"/\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen\",\n        children: [\n            currentUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sidebar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                channels: channels.map((c)=>({\n                        id: c.id,\n                        name: c.name,\n                        isDM: c.name.startsWith(\"dm_\")\n                    })),\n                users: users,\n                existingDMs: existingDMs,\n                selectedChannel: selectedChannel ? ((_channels_find = channels.find((c)=>c.id === selectedChannel)) === null || _channels_find === void 0 ? void 0 : _channels_find.name) || \"\" : \"\",\n                setSelectedChannel: async (channelName)=>{\n                    const channel = channels.find((c)=>c.name === channelName);\n                    if (channel) {\n                        setSelectedChannel(channel.id);\n                        // If it's a DM channel, set the selectedDirectMessage\n                        if (channel.name.startsWith(\"dm_\")) {\n                            const [_, ...participants] = channel.name.split(\"_\");\n                            const otherUser = participants.find((name)=>name !== currentUser.name);\n                            setSelectedDirectMessage(otherUser || null);\n                        } else {\n                            setSelectedDirectMessage(null);\n                        }\n                        setSelectedAvatar(null);\n                        // Reset user status when leaving avatar chat\n                        if (currentUser && selectedAvatar) {\n                            await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                                status: \"online\",\n                                statusMessage: \"\"\n                            });\n                            setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                        ...user,\n                                        status: \"online\",\n                                        statusMessage: \"\"\n                                    } : user));\n                        }\n                    }\n                },\n                selectedDirectMessage: selectedDirectMessage,\n                onSelectDirectMessage: handleSelectUser,\n                onAddDirectMessage: ()=>setIsSelectUserDialogOpen(true),\n                onDeleteDirectMessage: async (userName)=>{\n                    // Find the DM channel\n                    const participants = [\n                        currentUser.name,\n                        userName\n                    ].sort();\n                    const channelName = \"dm_\".concat(participants.join(\"_\"));\n                    const channel = channels.find((c)=>c.name === channelName);\n                    if (channel) {\n                        // Remove the channel\n                        setChannels((prev)=>prev.filter((c)=>c.id !== channel.id));\n                        // Remove from existingDMs\n                        setExistingDMs((prev)=>prev.filter((dm)=>dm.userName !== userName));\n                        // Clear selection if needed\n                        if (selectedChannel === channel.id) {\n                            setSelectedChannel(\"\");\n                            setSelectedDirectMessage(null);\n                        }\n                    }\n                },\n                onStatusChange: async (status, statusMessage)=>{\n                    if (!currentUser) return;\n                    try {\n                        await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                            status,\n                            statusMessage\n                        });\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    status,\n                                    statusMessage\n                                } : user));\n                    } catch (error) {\n                        console.error(\"Failed to update status:\", error);\n                    }\n                },\n                onProfileImageChange: async (file)=>{\n                    if (!currentUser) return;\n                    try {\n                        const updatedUser = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.uploadProfileImage(currentUser.id, file);\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    profileImage: updatedUser.profileImage\n                                } : user));\n                        setCurrentUser((prev)=>prev ? {\n                                ...prev,\n                                profileImage: updatedUser.profileImage\n                            } : null);\n                    } catch (error) {\n                        console.error(\"Failed to update profile image:\", error);\n                    }\n                },\n                onAddChannel: handleAddChannel,\n                onDeleteChannel: (channel)=>{\n                    setChannels((prev)=>prev.filter((c)=>c.name !== channel));\n                },\n                currentUser: currentUser,\n                dmMessages: dmMessages,\n                selectedAvatar: selectedAvatar,\n                onSelectAvatar: async (avatar)=>{\n                    setSelectedAvatar(avatar);\n                    setSelectedChannel(\"\");\n                    setSelectedDirectMessage(null);\n                    // Update user status when selecting an avatar\n                    if (currentUser) {\n                        await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                            status: \"active\",\n                            statusMessage: \"Chatting with \".concat(avatar)\n                        });\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    status: \"active\",\n                                    statusMessage: \"Chatting with \".concat(avatar)\n                                } : user));\n                    }\n                },\n                onLogout: handleLogout\n            }, void 0, false, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 400,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col\",\n                children: [\n                    currentUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_header__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        notifications: notifications,\n                        clearSearch: ()=>setSearchResults(null),\n                        currentUser: currentUser,\n                        onLogout: handleLogout\n                    }, void 0, false, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 517,\n                        columnNumber: 11\n                    }, this),\n                    searchResults ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_search_results__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        results: searchResults,\n                        onResultClick: handleSearchResultClick,\n                        onClearSearch: ()=>setSearchResults(null)\n                    }, void 0, false, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 525,\n                        columnNumber: 11\n                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-1 flex\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_channel_view__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                channel: selectedChannel ? ((_channels_find1 = channels.find((c)=>c.id === selectedChannel)) === null || _channels_find1 === void 0 ? void 0 : _channels_find1.name) || \"\" : \"\",\n                                directMessageUser: selectedDirectMessage,\n                                avatarChat: selectedAvatar,\n                                messages: selectedChannel ? channelMessages[selectedChannel] || [] : selectedDirectMessage ? (()=>{\n                                    const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                                    if (!selectedUser || !currentUser) return [];\n                                    const dmPairId = [\n                                        currentUser.id,\n                                        selectedUser.id\n                                    ].sort().join(\"_\");\n                                    return dmMessages[dmPairId] || [];\n                                })() : selectedAvatar ? dmMessages[\"avatar_\".concat(selectedAvatar)] || [] : [],\n                                onSendMessage: handleSendMessage,\n                                onReaction: handleReaction,\n                                onSearch: handleSearch,\n                                setSelectedThread: (threadId)=>{\n                                    if (threadId === null) {\n                                        setSelectedThread(null);\n                                    } else {\n                                        // Fetch thread data and set it\n                                        _lib_api__WEBPACK_IMPORTED_MODULE_9__.getThread(threadId).then((thread)=>{\n                                            setSelectedThread(thread);\n                                        });\n                                    }\n                                },\n                                currentUser: currentUser\n                            }, void 0, false, {\n                                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                                lineNumber: 532,\n                                columnNumber: 13\n                            }, this),\n                            selectedThread && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_thread_view__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                thread: selectedThread,\n                                onClose: ()=>setSelectedThread(null),\n                                currentUser: currentUser,\n                                onSendReply: async (content, file)=>{\n                                    if (!currentUser || !(selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messageId)) return;\n                                    try {\n                                        const reply = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.sendThreadReply(selectedThread.messageId, {\n                                            content,\n                                            userId: currentUser.id,\n                                            ...file ? {\n                                                file: {\n                                                    name: file.name,\n                                                    type: file.type,\n                                                    url: URL.createObjectURL(file)\n                                                }\n                                            } : {}\n                                        });\n                                        setSelectedThread((prev)=>prev ? {\n                                                ...prev,\n                                                messages: [\n                                                    ...prev.messages,\n                                                    reply\n                                                ]\n                                            } : null);\n                                    } catch (error) {\n                                        console.error(\"Failed to send reply:\", error);\n                                    }\n                                }\n                            }, void 0, false, {\n                                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                                lineNumber: 566,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 531,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 515,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_select_user_dialog__WEBPACK_IMPORTED_MODULE_8__.SelectUserDialog, {\n                isOpen: isSelectUserDialogOpen,\n                onClose: ()=>setIsSelectUserDialogOpen(false),\n                users: users,\n                onSelectUser: handleSelectUser,\n                currentUser: currentUser\n            }, void 0, false, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 597,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n        lineNumber: 398,\n        columnNumber: 5\n    }, this);\n}\n_s(SlackInterface, \"1EjqdfIx5JdLtPCCNT4I142FQ1U=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = SlackInterface;\nvar _c;\n$RefreshReg$(_c, \"SlackInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvc2xhY2staW50ZXJmYWNlLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUUyQztBQUNpQjtBQUM3QjtBQUNGO0FBQ1c7QUFDRjtBQUNNO0FBQ1c7QUFDdkI7QUFnQmpCLFNBQVNXO1FBNlhxQkMsZ0JBNkhKQTs7SUF6ZnZDLE1BQU1DLGVBQWVWLGdFQUFlQTtJQUNwQyxNQUFNVyxXQUFXRCxhQUFhRSxHQUFHLENBQUM7SUFDbEMsTUFBTSxDQUFDSCxVQUFVSSxZQUFZLEdBQUdoQiwrQ0FBUUEsQ0FBWSxFQUFFO0lBQ3RELE1BQU0sQ0FBQ2lCLGlCQUFpQkMsbUJBQW1CLEdBQUdsQiwrQ0FBUUEsQ0FBUztJQUMvRCxNQUFNLENBQUNtQixnQkFBZ0JDLGtCQUFrQixHQUFHcEIsK0NBQVFBLENBQWdCO0lBQ3BFLE1BQU0sQ0FBQ3FCLGVBQWVDLGlCQUFpQixHQUFHdEIsK0NBQVFBLENBQXFDO0lBQ3ZGLE1BQU0sQ0FBQ3VCLGlCQUFpQkMsbUJBQW1CLEdBQUd4QiwrQ0FBUUEsQ0FBa0IsQ0FBQztJQUN6RSxNQUFNLENBQUN5QixZQUFZQyxjQUFjLEdBQUcxQiwrQ0FBUUEsQ0FBYSxDQUFDO0lBQzFELE1BQU0sQ0FBQzJCLE9BQU9DLFNBQVMsR0FBRzVCLCtDQUFRQSxDQUFTLEVBQUU7SUFDN0MsTUFBTSxDQUFDNkIsYUFBYUMsZUFBZSxHQUFHOUIsK0NBQVFBLENBQWM7SUFDNUQsTUFBTSxDQUFDK0IsZUFBZUMsaUJBQWlCLEdBQUdoQywrQ0FBUUEsQ0FBaUIsRUFBRTtJQUNyRSxNQUFNLENBQUNpQyx1QkFBdUJDLHlCQUF5QixHQUFHbEMsK0NBQVFBLENBQWdCO0lBQ2xGLE1BQU0sQ0FBQ21DLHdCQUF3QkMsMEJBQTBCLEdBQUdwQywrQ0FBUUEsQ0FBQztJQUNyRSxNQUFNLENBQUNxQyxnQkFBZ0JDLGtCQUFrQixHQUFHdEMsK0NBQVFBLENBQWdCO0lBQ3BFLE1BQU0sQ0FBQ3VDLGFBQWFD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bkMsSUFBSSxDQUFDOUQsZUFBZSxFQUFDViwyQkFBQUEscUNBQUFBLGVBQWdCOEcsU0FBUyxHQUFFO29DQUNoRCxJQUFJO3dDQUNGLE1BQU1zRCxRQUFRLE1BQU03SyxxREFBbUIsQ0FBQ1MsZUFBZThHLFNBQVMsRUFBRTs0Q0FDaEV6Qzs0Q0FDQW1DLFFBQVE5RixZQUFZcUIsRUFBRTs0Q0FDdEIsR0FBSXlDLE9BQU87Z0RBQ1RBLE1BQU07b0RBQ0pyQyxNQUFNcUMsS0FBS3JDLElBQUk7b0RBQ2YrRCxNQUFNMUIsS0FBSzBCLElBQUk7b0RBQ2ZDLEtBQUttRSxJQUFJQyxlQUFlLENBQUMvRjtnREFDM0I7NENBQ0YsSUFBSSxDQUFDLENBQUM7d0NBQ1I7d0NBQ0F2RSxrQkFBa0J5QyxDQUFBQSxPQUFRQSxPQUFPO2dEQUMvQixHQUFHQSxJQUFJO2dEQUNQSSxVQUFVO3VEQUFJSixLQUFLSSxRQUFRO29EQUFFc0g7aURBQU07NENBQ3JDLElBQUk7b0NBQ04sRUFBRSxPQUFPekgsT0FBTzt3Q0FDZEMsUUFBUUQsS0FBSyxDQUFDLHlCQUF5QkE7b0NBQ3pDO2dDQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBTVYsOERBQUNyRCxpRUFBZ0JBO2dCQUNma0wsUUFBUXhKO2dCQUNSa0osU0FBUyxJQUFNakosMEJBQTBCO2dCQUN6Q1QsT0FBT0E7Z0JBQ1BpSyxjQUFjekM7Z0JBQ2R0SCxhQUFhQTs7Ozs7Ozs7Ozs7O0FBSXJCO0dBbmtCd0JsQjs7UUFDRFIsNERBQWVBO1FBZXJCRCxzREFBU0E7OztLQWhCRlMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9zbGFjay1pbnRlcmZhY2UudHN4PzU5YWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVJvdXRlciwgdXNlU2VhcmNoUGFyYW1zIH0gZnJvbSAnbmV4dC9uYXZpZ2F0aW9uJ1xuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9zaWRlYmFyJ1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL2hlYWRlcidcbmltcG9ydCBDaGFubmVsVmlldyBmcm9tICcuL2NoYW5uZWwtdmlldydcbmltcG9ydCBUaHJlYWRWaWV3IGZyb20gJy4vdGhyZWFkLXZpZXcnXG5pbXBvcnQgU2VhcmNoUmVzdWx0cyBmcm9tICcuL3NlYXJjaC1yZXN1bHRzJ1xuaW1wb3J0IHsgU2VsZWN0VXNlckRpYWxvZyB9IGZyb20gJy4vc2VsZWN0LXVzZXItZGlhbG9nJ1xuaW1wb3J0ICogYXMgYXBpIGZyb20gJ0AvbGliL2FwaSdcbmltcG9ydCB7IE1lc3NhZ2UsIFRocmVhZE1lc3NhZ2UsIFRocmVhZCwgVXNlciwgTm90aWZpY2F0aW9uIH0gZnJvbSAnQC9saWIvdHlwZXMnXG5cbmludGVyZmFjZSBDaGFubmVsTWVzc2FnZXMge1xuICBbY2hhbm5lbElkOiBzdHJpbmddOiBNZXNzYWdlW107XG59XG5cbmludGVyZmFjZSBETU1lc3NhZ2VzIHtcbiAgW3VzZXJQYWlyOiBzdHJpbmddOiBNZXNzYWdlW107XG59XG5cbmludGVyZmFjZSBDaGFubmVsIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTbGFja0ludGVyZmFjZSgpIHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdXNlU2VhcmNoUGFyYW1zKClcbiAgY29uc3QgdXNlcm5hbWUgPSBzZWFyY2hQYXJhbXMuZ2V0KCd1c2VybmFtZScpXG4gIGNvbnN0IFtjaGFubmVscywgc2V0Q2hhbm5lbHNdID0gdXNlU3RhdGU8Q2hhbm5lbFtdPihbXSlcbiAgY29uc3QgW3NlbGVjdGVkQ2hhbm5lbCwgc2V0U2VsZWN0ZWRDaGFubmVsXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpXG4gIGNvbnN0IFtzZWxlY3RlZFRocmVhZCwgc2V0U2VsZWN0ZWRUaHJlYWRdID0gdXNlU3RhdGU8VGhyZWFkIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW3NlYXJjaFJlc3VsdHMsIHNldFNlYXJjaFJlc3VsdHNdID0gdXNlU3RhdGU8KE1lc3NhZ2UgfCBUaHJlYWRNZXNzYWdlKVtdIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW2NoYW5uZWxNZXNzYWdlcywgc2V0Q2hhbm5lbE1lc3NhZ2VzXSA9IHVzZVN0YXRlPENoYW5uZWxNZXNzYWdlcz4oe30pXG4gIGNvbnN0IFtkbU1lc3NhZ2VzLCBzZXRETU1lc3NhZ2VzXSA9IHVzZVN0YXRlPERNTWVzc2FnZXM+KHt9KVxuICBjb25zdCBbdXNlcnMsIHNldFVzZXJzXSA9IHVzZVN0YXRlPFVzZXJbXT4oW10pXG4gIGNvbnN0IFtjdXJyZW50VXNlciwgc2V0Q3VycmVudFVzZXJdID0gdXNlU3RhdGU8VXNlciB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtub3RpZmljYXRpb25zLCBzZXROb3RpZmljYXRpb25zXSA9IHVzZVN0YXRlPE5vdGlmaWNhdGlvbltdPihbXSlcbiAgY29uc3QgW3NlbGVjdGVkRGlyZWN0TWVzc2FnZSwgc2V0U2VsZWN0ZWREaXJlY3RNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtpc1NlbGVjdFVzZXJEaWFsb2dPcGVuLCBzZXRJc1NlbGVjdFVzZXJEaWFsb2dPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbc2VsZWN0ZWRBdmF0YXIsIHNldFNlbGVjdGVkQXZhdGFyXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtleGlzdGluZ0RNcywgc2V0RXhpc3RpbmdETXNdID0gdXNlU3RhdGU8e3VzZXJOYW1lOiBzdHJpbmd9W10+KFtdKVxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKVxuXG4gIC8vIEZldGNoIGluaXRpYWwgZGF0YVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoSW5pdGlhbERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBbY2hhbm5lbHNEYXRhLCB1c2Vyc0RhdGFdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgIGFwaS5nZXRDaGFubmVscygpLFxuICAgICAgICAgIGFwaS5nZXRVc2VycygpLFxuICAgICAgICBdKVxuICAgICAgICBzZXRDaGFubmVscyhjaGFubmVsc0RhdGEpXG4gICAgICAgIHNldFVzZXJzKHVzZXJzRGF0YSlcbiAgICAgICAgaWYgKGNoYW5uZWxzRGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc2V0U2VsZWN0ZWRDaGFubmVsKGNoYW5uZWxzRGF0YVswXS5pZClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBjdXJyZW50IHVzZXIgKGluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgY29tZSBmcm9tIGF1dGhlbnRpY2F0aW9uKVxuICAgICAgICBpZiAodXNlcm5hbWUpIHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZ1VzZXIgPSB1c2Vyc0RhdGEuZmluZCgodTogVXNlcikgPT4gdS5uYW1lID09PSB1c2VybmFtZSlcbiAgICAgICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgICAgICBzZXRDdXJyZW50VXNlcihleGlzdGluZ1VzZXIpXG4gICAgICAgICAgICAvLyBGZXRjaCBleGlzdGluZyBETSBwYWlycyBmb3IgdGhlIHVzZXJcbiAgICAgICAgICAgIGNvbnN0IGRtUGFpcnMgPSBhd2FpdCBhcGkuZ2V0RE1QYWlycyhleGlzdGluZ1VzZXIuaWQpXG4gICAgICAgICAgICBzZXRFeGlzdGluZ0RNcyhkbVBhaXJzKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgdXNlciB3aXRoIHRoZSBwcm92aWRlZCB1c2VybmFtZVxuICAgICAgICAgICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IGFwaS5jcmVhdGVVc2VyKHtcbiAgICAgICAgICAgICAgbmFtZTogdXNlcm5hbWUsXG4gICAgICAgICAgICAgIHN0YXR1czogJ29ubGluZScsXG4gICAgICAgICAgICAgIHN0YXR1c01lc3NhZ2U6ICcnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHNldEN1cnJlbnRVc2VyKG5ld1VzZXIpXG4gICAgICAgICAgICBzZXRVc2VycyhwcmV2ID0+IFsuLi5wcmV2LCBuZXdVc2VyXSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBpbml0aWFsIGRhdGE6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hJbml0aWFsRGF0YSgpXG4gIH0sIFtdKVxuXG4gIC8vIEZldGNoIG1lc3NhZ2VzIHdoZW4gc2VsZWN0ZWQgY2hhbm5lbCBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hNZXNzYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghc2VsZWN0ZWRDaGFubmVsIHx8ICFjdXJyZW50VXNlcikgcmV0dXJuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgYXBpLmdldE1lc3NhZ2VzKHNlbGVjdGVkQ2hhbm5lbClcbiAgICAgICAgc2V0Q2hhbm5lbE1lc3NhZ2VzKHByZXYgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgIFtzZWxlY3RlZENoYW5uZWxdOiBtZXNzYWdlcyxcbiAgICAgICAgfSkpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggbWVzc2FnZXM6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hNZXNzYWdlcygpXG4gIH0sIFtzZWxlY3RlZENoYW5uZWwsIGN1cnJlbnRVc2VyXSlcblxuICAvLyBGZXRjaCBETSBtZXNzYWdlcyB3aGVuIHNlbGVjdGVkIHVzZXIgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoRE1NZXNzYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghc2VsZWN0ZWREaXJlY3RNZXNzYWdlIHx8ICFjdXJyZW50VXNlcikgcmV0dXJuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIHNlbGVjdGVkIHVzZXIncyBJRFxuICAgICAgICBjb25zdCBzZWxlY3RlZFVzZXIgPSB1c2Vycy5maW5kKHUgPT4gdS5uYW1lID09PSBzZWxlY3RlZERpcmVjdE1lc3NhZ2UpXG4gICAgICAgIGlmICghc2VsZWN0ZWRVc2VyKSByZXR1cm5cblxuICAgICAgICAvLyBTb3J0IHVzZXIgSURzIHRvIGVuc3VyZSBjb25zaXN0ZW50IGRtUGFpcklkIHJlZ2FyZGxlc3Mgb2Ygd2hvJ3Mgdmlld2luZ1xuICAgICAgICBjb25zdCB1c2VySWRzID0gW2N1cnJlbnRVc2VyLmlkLCBzZWxlY3RlZFVzZXIuaWRdLnNvcnQoKVxuICAgICAgICBjb25zdCBkbVBhaXJJZCA9IGAke3VzZXJJZHNbMF19XyR7dXNlcklkc1sxXX1gXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgYXBpLmdldE1lc3NhZ2VzKHVuZGVmaW5lZCwgZG1QYWlySWQpXG4gICAgICAgIFxuICAgICAgICAvLyBTdG9yZSBtZXNzYWdlcyB1c2luZyB0aGUgc2FtZSBkbVBhaXJJZCBhcyB0aGUga2V5XG4gICAgICAgIHNldERNTWVzc2FnZXMocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgW2RtUGFpcklkXTogbWVzc2FnZXMsXG4gICAgICAgIH0pKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIERNIG1lc3NhZ2VzOicsIGVycm9yKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZldGNoRE1NZXNzYWdlcygpXG4gIH0sIFtzZWxlY3RlZERpcmVjdE1lc3NhZ2UsIGN1cnJlbnRVc2VyLCB1c2Vyc10pXG5cbiAgLy8gRmV0Y2ggYXZhdGFyIGNoYXQgbWVzc2FnZXMgd2hlbiBzZWxlY3RlZCBhdmF0YXIgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoQXZhdGFyTWVzc2FnZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAoIXNlbGVjdGVkQXZhdGFyIHx8ICFjdXJyZW50VXNlcikgcmV0dXJuXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgYXBpLmdldE1lc3NhZ2VzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBzZWxlY3RlZEF2YXRhcilcbiAgICAgICAgY29uc3QgYXZhdGFyS2V5ID0gYGF2YXRhcl8ke3NlbGVjdGVkQXZhdGFyfWBcbiAgICAgICAgc2V0RE1NZXNzYWdlcyhwcmV2ID0+ICh7XG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICBbYXZhdGFyS2V5XTogbWVzc2FnZXMsXG4gICAgICAgIH0pKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIGF2YXRhciBtZXNzYWdlczonLCBlcnJvcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmZXRjaEF2YXRhck1lc3NhZ2VzKClcbiAgfSwgW3NlbGVjdGVkQXZhdGFyLCBjdXJyZW50VXNlcl0pXG5cbiAgY29uc3QgaGFuZGxlU2VhcmNoID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICBpZiAocXVlcnkudHJpbSgpID09PSAnJykge1xuICAgICAgc2V0U2VhcmNoUmVzdWx0cyhudWxsKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgbG93ZXJjYXNlUXVlcnkgPSBxdWVyeS50b0xvd2VyQ2FzZSgpXG5cbiAgICBjb25zdCBhbGxNZXNzYWdlcyA9IFtcbiAgICAgIC4uLk9iamVjdC52YWx1ZXMoY2hhbm5lbE1lc3NhZ2VzKS5mbGF0KCksXG4gICAgICAuLi5PYmplY3QudmFsdWVzKGRtTWVzc2FnZXMpLmZsYXQoKSxcbiAgICBdXG5cbiAgICBjb25zdCByZXN1bHRzID0gYWxsTWVzc2FnZXMuZmlsdGVyKChtZXNzYWdlKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50TWF0Y2ggPSBtZXNzYWdlLmNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsb3dlcmNhc2VRdWVyeSlcbiAgICAgIGNvbnN0IGZpbGVuYW1lTWF0Y2ggPSBtZXNzYWdlLmZpbGUgJiYgbWVzc2FnZS5maWxlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhsb3dlcmNhc2VRdWVyeSlcbiAgICAgIHJldHVybiBjb250ZW50TWF0Y2ggfHwgZmlsZW5hbWVNYXRjaFxuICAgIH0pXG5cbiAgICBzZXRTZWFyY2hSZXN1bHRzKHJlc3VsdHMpXG4gIH1cblxuICBjb25zdCBoYW5kbGVTZWFyY2hSZXN1bHRDbGljayA9IChyZXN1bHQ6IE1lc3NhZ2UgfCBUaHJlYWRNZXNzYWdlKSA9PiB7XG4gICAgLy8gRmluZCB0aGUgY2hhbm5lbCBvciBETSBjb250YWluaW5nIHRoaXMgbWVzc2FnZVxuICAgIGZvciAoY29uc3QgW2NoYW5uZWwsIG1lc3NhZ2VzXSBvZiBPYmplY3QuZW50cmllcyhjaGFubmVsTWVzc2FnZXMpKSB7XG4gICAgICBpZiAobWVzc2FnZXMuc29tZShtID0+IG0uaWQgPT09IHJlc3VsdC5pZCkpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDaGFubmVsKGNoYW5uZWwpXG4gICAgICAgIHNldFNlbGVjdGVkRGlyZWN0TWVzc2FnZShudWxsKVxuICAgICAgICBzZXRTZWFyY2hSZXN1bHRzKG51bGwpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgW2RtS2V5LCBtZXNzYWdlc10gb2YgT2JqZWN0LmVudHJpZXMoZG1NZXNzYWdlcykpIHtcbiAgICAgIGlmIChtZXNzYWdlcy5zb21lKG0gPT4gbS5pZCA9PT0gcmVzdWx0LmlkKSkge1xuICAgICAgICBjb25zdCBbdXNlcjEsIHVzZXIyXSA9IGRtS2V5LnNwbGl0KCdfJylcbiAgICAgICAgY29uc3Qgb3RoZXJVc2VyID0gdXNlcjEgPT09IGN1cnJlbnRVc2VyPy5uYW1lID8gdXNlcjIgOiB1c2VyMVxuICAgICAgICBzZXRTZWxlY3RlZERpcmVjdE1lc3NhZ2Uob3RoZXJVc2VyKVxuICAgICAgICBzZXRTZWxlY3RlZENoYW5uZWwoJycpXG4gICAgICAgIHNldFNlYXJjaFJlc3VsdHMobnVsbClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlU2VuZE1lc3NhZ2UgPSBhc3luYyAoY29udGVudDogc3RyaW5nLCBmaWxlPzogRmlsZSkgPT4ge1xuICAgIGlmICghY3VycmVudFVzZXIpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBmaWxlRGF0YVxuICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgLy8gQ3JlYXRlIEZvcm1EYXRhIGFuZCBhcHBlbmQgZmlsZVxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZW5hbWUnLCBmaWxlLm5hbWUpXG4gICAgICAgIFxuICAgICAgICAvLyBVcGxvYWQgZmlsZSBmaXJzdFxuICAgICAgICBjb25zdCB1cGxvYWRSZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGVzL3VwbG9hZCcsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBib2R5OiBmb3JtRGF0YVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgaWYgKCF1cGxvYWRSZXNwb25zZS5vaykge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdXBsb2FkUmVzcG9uc2UuanNvbigpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLmRldGFpbHMgfHwgJ0ZhaWxlZCB0byB1cGxvYWQgZmlsZScpXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHsgZmlsZVVybCB9ID0gYXdhaXQgdXBsb2FkUmVzcG9uc2UuanNvbigpXG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgZmlsZSBkYXRhIHN0cnVjdHVyZVxuICAgICAgICBmaWxlRGF0YSA9IHtcbiAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgdHlwZTogZmlsZS50eXBlLFxuICAgICAgICAgIHVybDogZmlsZVVybFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSB1c2VyIHN0YXR1cyB0byBzaG93IGFjdGl2aXR5XG4gICAgICBpZiAoY3VycmVudFVzZXIgJiYgc2VsZWN0ZWRBdmF0YXIpIHtcbiAgICAgICAgYXdhaXQgYXBpLnVwZGF0ZVVzZXJTdGF0dXMoY3VycmVudFVzZXIuaWQsIHtcbiAgICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgICAgIHN0YXR1c01lc3NhZ2U6IGBDaGF0dGluZyB3aXRoICR7c2VsZWN0ZWRBdmF0YXJ9YCxcbiAgICAgICAgfSlcbiAgICAgICAgc2V0VXNlcnMocHJldiA9PiBwcmV2Lm1hcCh1c2VyID0+IFxuICAgICAgICAgIHVzZXIuaWQgPT09IGN1cnJlbnRVc2VyLmlkIFxuICAgICAgICAgICAgPyB7IC4uLnVzZXIsIHN0YXR1czogJ2FjdGl2ZScsIHN0YXR1c01lc3NhZ2U6IGBDaGF0dGluZyB3aXRoICR7c2VsZWN0ZWRBdmF0YXJ9YCB9XG4gICAgICAgICAgICA6IHVzZXJcbiAgICAgICAgKSlcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCB0aGUgc2VsZWN0ZWQgdXNlcidzIElEIGZvciBETXNcbiAgICAgIGNvbnN0IHNlbGVjdGVkVXNlciA9IHNlbGVjdGVkRGlyZWN0TWVzc2FnZSA/IHVzZXJzLmZpbmQodSA9PiB1Lm5hbWUgPT09IHNlbGVjdGVkRGlyZWN0TWVzc2FnZSkgOiBudWxsXG5cbiAgICAgIC8vIENvbnN0cnVjdCBtZXNzYWdlIGRhdGFcbiAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge1xuICAgICAgICBjb250ZW50LFxuICAgICAgICB1c2VySWQ6IGN1cnJlbnRVc2VyLmlkLFxuICAgICAgICAuLi4oc2VsZWN0ZWRDaGFubmVsID8geyBjaGFubmVsSWQ6IHNlbGVjdGVkQ2hhbm5lbCB9IDoge30pLFxuICAgICAgICAuLi4oc2VsZWN0ZWREaXJlY3RNZXNzYWdlICYmIHNlbGVjdGVkVXNlciA/IHsgXG4gICAgICAgICAgZG1QYWlySWQ6IGAke1tjdXJyZW50VXNlci5pZCwgc2VsZWN0ZWRVc2VyLmlkXS5zb3J0KClbMF19XyR7W2N1cnJlbnRVc2VyLmlkLCBzZWxlY3RlZFVzZXIuaWRdLnNvcnQoKVsxXX1gXG4gICAgICAgIH0gOiB7fSksXG4gICAgICAgIC4uLihzZWxlY3RlZEF2YXRhciA/IHsgYXZhdGFySWQ6IHNlbGVjdGVkQXZhdGFyIH0gOiB7fSksXG4gICAgICAgIC4uLihmaWxlRGF0YSA/IHsgZmlsZTogZmlsZURhdGEgfSA6IHt9KSxcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3TWVzc2FnZSA9IGF3YWl0IGFwaS5zZW5kTWVzc2FnZShtZXNzYWdlRGF0YSlcblxuICAgICAgaWYgKHNlbGVjdGVkQ2hhbm5lbCkge1xuICAgICAgICBzZXRDaGFubmVsTWVzc2FnZXMocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgW3NlbGVjdGVkQ2hhbm5lbF06IFsuLi4ocHJldltzZWxlY3RlZENoYW5uZWxdIHx8IFtdKSwgbmV3TWVzc2FnZV0sXG4gICAgICAgIH0pKVxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZERpcmVjdE1lc3NhZ2UgJiYgc2VsZWN0ZWRVc2VyKSB7XG4gICAgICAgIGNvbnN0IHVzZXJJZHMgPSBbY3VycmVudFVzZXIuaWQsIHNlbGVjdGVkVXNlci5pZF0uc29ydCgpXG4gICAgICAgIGNvbnN0IGRtUGFpcklkID0gYCR7dXNlcklkc1swXX1fJHt1c2VySWRzWzFdfWBcbiAgICAgICAgc2V0RE1NZXNzYWdlcyhwcmV2ID0+ICh7XG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICBbZG1QYWlySWRdOiBbLi4uKHByZXZbZG1QYWlySWRdIHx8IFtdKSwgbmV3TWVzc2FnZV0sXG4gICAgICAgIH0pKVxuICAgICAgfSBlbHNlIGlmIChzZWxlY3RlZEF2YXRhcikge1xuICAgICAgICAvLyBIYW5kbGUgYXZhdGFyIGNoYXQgbWVzc2FnZXNcbiAgICAgICAgY29uc3QgYXZhdGFyS2V5ID0gYGF2YXRhcl8ke3NlbGVjdGVkQXZhdGFyfWBcbiAgICAgICAgc2V0RE1NZXNzYWdlcyhwcmV2ID0+ICh7XG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICBbYXZhdGFyS2V5XTogWy4uLihwcmV2W2F2YXRhcktleV0gfHwgW10pLCBuZXdNZXNzYWdlXSxcbiAgICAgICAgfSkpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZW5kIG1lc3NhZ2U6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlUmVhY3Rpb24gPSBhc3luYyAobWVzc2FnZUlkOiBzdHJpbmcsIGVtb2ppOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWN1cnJlbnRVc2VyKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhcGkudG9nZ2xlUmVhY3Rpb24oe1xuICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgIHVzZXJJZDogY3VycmVudFVzZXIuaWQsXG4gICAgICAgIGVtb2ppLFxuICAgICAgfSlcblxuICAgICAgLy8gVXBkYXRlIHRoZSBVSSBvcHRpbWlzdGljYWxseVxuICAgICAgY29uc3QgdXBkYXRlTWVzc2FnZXMgPSAobWVzc2FnZXM6IE1lc3NhZ2VbXSkgPT5cbiAgICAgICAgbWVzc2FnZXMubWFwKG1zZyA9PlxuICAgICAgICAgIG1zZy5pZCA9PT0gbWVzc2FnZUlkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAuLi5tc2csXG4gICAgICAgICAgICAgICAgcmVhY3Rpb25zOiBtc2cucmVhY3Rpb25zLmluY2x1ZGVzKGVtb2ppKVxuICAgICAgICAgICAgICAgICAgPyBtc2cucmVhY3Rpb25zLmZpbHRlcihyID0+IHIgIT09IGVtb2ppKVxuICAgICAgICAgICAgICAgICAgOiBbLi4ubXNnLnJlYWN0aW9ucywgZW1vamldLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IG1zZ1xuICAgICAgICApXG5cbiAgICAgIGlmIChzZWxlY3RlZENoYW5uZWwpIHtcbiAgICAgICAgc2V0Q2hhbm5lbE1lc3NhZ2VzKHByZXYgPT4gKHtcbiAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgIFtzZWxlY3RlZENoYW5uZWxdOiB1cGRhdGVNZXNzYWdlcyhwcmV2W3NlbGVjdGVkQ2hhbm5lbF0gfHwgW10pLFxuICAgICAgICB9KSlcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWREaXJlY3RNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVXNlciA9IHVzZXJzLmZpbmQodSA9PiB1Lm5hbWUgPT09IHNlbGVjdGVkRGlyZWN0TWVzc2FnZSlcbiAgICAgICAgaWYgKCFzZWxlY3RlZFVzZXIpIHJldHVyblxuICAgICAgICBjb25zdCB1c2VySWRzID0gW2N1cnJlbnRVc2VyLmlkLCBzZWxlY3RlZFVzZXIuaWRdLnNvcnQoKVxuICAgICAgICBjb25zdCBkbVBhaXJJZCA9IGAke3VzZXJJZHNbMF19XyR7dXNlcklkc1sxXX1gXG4gICAgICAgIHNldERNTWVzc2FnZXMocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgW2RtUGFpcklkXTogdXBkYXRlTWVzc2FnZXMocHJldltkbVBhaXJJZF0gfHwgW10pLFxuICAgICAgICB9KSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHRvZ2dsZSByZWFjdGlvbjonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICBjb25zdCBoYW5kbGVBZGRDaGFubmVsID0gYXN5bmMgKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygnQXR0ZW1wdGluZyB0byBjcmVhdGUgY2hhbm5lbDonLCBuYW1lKVxuICAgICAgY29uc3QgbmV3Q2hhbm5lbCA9IGF3YWl0IGFwaS5jcmVhdGVDaGFubmVsKG5hbWUpXG4gICAgICBjb25zb2xlLmxvZygnQ2hhbm5lbCBjcmVhdGVkIHN1Y2Nlc3NmdWxseTonLCBuZXdDaGFubmVsKVxuICAgICAgc2V0Q2hhbm5lbHMocHJldiA9PiBbLi4ucHJldiwgbmV3Q2hhbm5lbF0pXG4gICAgICBzZXRTZWxlY3RlZENoYW5uZWwobmV3Q2hhbm5lbC5pZClcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjaGFubmVsOicsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUFkZERpcmVjdE1lc3NhZ2UgPSBhc3luYyAodXNlck5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmICghY3VycmVudFVzZXIpIHJldHVyblxuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBGaW5kIHRoZSBzZWxlY3RlZCB1c2VyXG4gICAgICBjb25zdCBzZWxlY3RlZFVzZXIgPSB1c2Vycy5maW5kKHUgPT4gdS5uYW1lID09PSB1c2VyTmFtZSlcbiAgICAgIGlmICghc2VsZWN0ZWRVc2VyKSByZXR1cm5cblxuICAgICAgLy8gQ3JlYXRlIGEgY2hhbm5lbCBuYW1lIGZvciB0aGUgRE0gdGhhdCdzIGNvbnNpc3RlbnQgcmVnYXJkbGVzcyBvZiB3aG8gY3JlYXRlcyBpdFxuICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gW2N1cnJlbnRVc2VyLm5hbWUsIHVzZXJOYW1lXS5zb3J0KClcbiAgICAgIGNvbnN0IGNoYW5uZWxOYW1lID0gYGRtXyR7cGFydGljaXBhbnRzLmpvaW4oJ18nKX1gXG5cbiAgICAgIC8vIENoZWNrIGlmIHRoZSBjaGFubmVsIGFscmVhZHkgZXhpc3RzXG4gICAgICBjb25zdCBleGlzdGluZ0NoYW5uZWwgPSBjaGFubmVscy5maW5kKGMgPT4gYy5uYW1lID09PSBjaGFubmVsTmFtZSlcbiAgICAgIGlmIChleGlzdGluZ0NoYW5uZWwpIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRDaGFubmVsKGV4aXN0aW5nQ2hhbm5lbC5pZClcbiAgICAgICAgc2V0U2VsZWN0ZWREaXJlY3RNZXNzYWdlKHVzZXJOYW1lKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IGNoYW5uZWwgZm9yIHRoZSBETVxuICAgICAgY29uc3QgbmV3Q2hhbm5lbCA9IGF3YWl0IGFwaS5jcmVhdGVDaGFubmVsKGNoYW5uZWxOYW1lKVxuICAgICAgc2V0Q2hhbm5lbHMocHJldiA9PiBbLi4ucHJldiwgbmV3Q2hhbm5lbF0pXG4gICAgICBzZXRTZWxlY3RlZENoYW5uZWwobmV3Q2hhbm5lbC5pZClcbiAgICAgIHNldFNlbGVjdGVkRGlyZWN0TWVzc2FnZSh1c2VyTmFtZSlcbiAgICAgIFxuICAgICAgLy8gQWRkIHRvIGV4aXN0aW5nIERNcyBsaXN0XG4gICAgICBzZXRFeGlzdGluZ0RNcyhwcmV2ID0+IFsuLi5wcmV2LCB7IHVzZXJOYW1lIH1dKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIERNIGNoYW5uZWw6JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBTZWxlY3RVc2VyRGlhbG9nIGhhbmRsZXJcbiAgY29uc3QgaGFuZGxlU2VsZWN0VXNlciA9ICh1c2VyTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgaGFuZGxlQWRkRGlyZWN0TWVzc2FnZSh1c2VyTmFtZSlcbiAgICBzZXRJc1NlbGVjdFVzZXJEaWFsb2dPcGVuKGZhbHNlKVxuICB9XG5cbiAgLy8gQWRkIGhhbmRsZUxvZ291dCBmdW5jdGlvblxuICBjb25zdCBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7XG4gICAgLy8gQ2xvc2UgYW55IG9wZW4gZGlhbG9nc1xuICAgIHNldElzU2VsZWN0VXNlckRpYWxvZ09wZW4oZmFsc2UpXG4gICAgXG4gICAgLy8gQ2xlYXIgdXNlciBzdGF0ZVxuICAgIHNldEN1cnJlbnRVc2VyKG51bGwpXG4gICAgc2V0Q2hhbm5lbE1lc3NhZ2VzKHt9KVxuICAgIHNldERNTWVzc2FnZXMoe30pXG4gICAgc2V0U2VsZWN0ZWRDaGFubmVsKCcnKVxuICAgIHNldFNlbGVjdGVkRGlyZWN0TWVzc2FnZShudWxsKVxuICAgIHNldFNlbGVjdGVkVGhyZWFkKG51bGwpXG4gICAgc2V0U2VhcmNoUmVzdWx0cyhudWxsKVxuICAgIFxuICAgIC8vIFJlZGlyZWN0IHRvIGxvZ2luIHBhZ2VcbiAgICByb3V0ZXIucHVzaCgnLycpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBoLXNjcmVlblwiPlxuICAgICAge2N1cnJlbnRVc2VyICYmIChcbiAgICAgICAgPFNpZGViYXJcbiAgICAgICAgICBjaGFubmVscz17Y2hhbm5lbHMubWFwKGMgPT4gKHtcbiAgICAgICAgICAgIGlkOiBjLmlkLFxuICAgICAgICAgICAgbmFtZTogYy5uYW1lLFxuICAgICAgICAgICAgaXNETTogYy5uYW1lLnN0YXJ0c1dpdGgoJ2RtXycpXG4gICAgICAgICAgfSkpfVxuICAgICAgICAgIHVzZXJzPXt1c2Vyc31cbiAgICAgICAgICBleGlzdGluZ0RNcz17ZXhpc3RpbmdETXN9XG4gICAgICAgICAgc2VsZWN0ZWRDaGFubmVsPXtzZWxlY3RlZENoYW5uZWwgPyBjaGFubmVscy5maW5kKGMgPT4gYy5pZCA9PT0gc2VsZWN0ZWRDaGFubmVsKT8ubmFtZSB8fCAnJyA6ICcnfVxuICAgICAgICAgIHNldFNlbGVjdGVkQ2hhbm5lbD17YXN5bmMgKGNoYW5uZWxOYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGFubmVsID0gY2hhbm5lbHMuZmluZChjID0+IGMubmFtZSA9PT0gY2hhbm5lbE5hbWUpXG4gICAgICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgICAgICBzZXRTZWxlY3RlZENoYW5uZWwoY2hhbm5lbC5pZClcbiAgICAgICAgICAgICAgLy8gSWYgaXQncyBhIERNIGNoYW5uZWwsIHNldCB0aGUgc2VsZWN0ZWREaXJlY3RNZXNzYWdlXG4gICAgICAgICAgICAgIGlmIChjaGFubmVsLm5hbWUuc3RhcnRzV2l0aCgnZG1fJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbXywgLi4ucGFydGljaXBhbnRzXSA9IGNoYW5uZWwubmFtZS5zcGxpdCgnXycpXG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJVc2VyID0gcGFydGljaXBhbnRzLmZpbmQobmFtZSA9PiBuYW1lICE9PSBjdXJyZW50VXNlci5uYW1lKVxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkRGlyZWN0TWVzc2FnZShvdGhlclVzZXIgfHwgbnVsbClcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZERpcmVjdE1lc3NhZ2UobnVsbClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzZXRTZWxlY3RlZEF2YXRhcihudWxsKVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gUmVzZXQgdXNlciBzdGF0dXMgd2hlbiBsZWF2aW5nIGF2YXRhciBjaGF0XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50VXNlciAmJiBzZWxlY3RlZEF2YXRhcikge1xuICAgICAgICAgICAgICAgIGF3YWl0IGFwaS51cGRhdGVVc2VyU3RhdHVzKGN1cnJlbnRVc2VyLmlkLCB7XG4gICAgICAgICAgICAgICAgICBzdGF0dXM6ICdvbmxpbmUnLFxuICAgICAgICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogJycsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBzZXRVc2VycyhwcmV2ID0+IHByZXYubWFwKHVzZXIgPT4gXG4gICAgICAgICAgICAgICAgICB1c2VyLmlkID09PSBjdXJyZW50VXNlci5pZCBcbiAgICAgICAgICAgICAgICAgICAgPyB7IC4uLnVzZXIsIHN0YXR1czogJ29ubGluZScsIHN0YXR1c01lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1c2VyXG4gICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgc2VsZWN0ZWREaXJlY3RNZXNzYWdlPXtzZWxlY3RlZERpcmVjdE1lc3NhZ2V9XG4gICAgICAgICAgb25TZWxlY3REaXJlY3RNZXNzYWdlPXtoYW5kbGVTZWxlY3RVc2VyfVxuICAgICAgICAgIG9uQWRkRGlyZWN0TWVzc2FnZT17KCkgPT4gc2V0SXNTZWxlY3RVc2VyRGlhbG9nT3Blbih0cnVlKX1cbiAgICAgICAgICBvbkRlbGV0ZURpcmVjdE1lc3NhZ2U9e2FzeW5jICh1c2VyTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBETSBjaGFubmVsXG4gICAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSBbY3VycmVudFVzZXIubmFtZSwgdXNlck5hbWVdLnNvcnQoKVxuICAgICAgICAgICAgY29uc3QgY2hhbm5lbE5hbWUgPSBgZG1fJHtwYXJ0aWNpcGFudHMuam9pbignXycpfWBcbiAgICAgICAgICAgIGNvbnN0IGNoYW5uZWwgPSBjaGFubmVscy5maW5kKGMgPT4gYy5uYW1lID09PSBjaGFubmVsTmFtZSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBjaGFubmVsXG4gICAgICAgICAgICAgIHNldENoYW5uZWxzKHByZXYgPT4gcHJldi5maWx0ZXIoYyA9PiBjLmlkICE9PSBjaGFubmVsLmlkKSlcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gZXhpc3RpbmdETXNcbiAgICAgICAgICAgICAgc2V0RXhpc3RpbmdETXMocHJldiA9PiBwcmV2LmZpbHRlcihkbSA9PiBkbS51c2VyTmFtZSAhPT0gdXNlck5hbWUpKVxuICAgICAgICAgICAgICAvLyBDbGVhciBzZWxlY3Rpb24gaWYgbmVlZGVkXG4gICAgICAgICAgICAgIGlmIChzZWxlY3RlZENoYW5uZWwgPT09IGNoYW5uZWwuaWQpIHtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZENoYW5uZWwoJycpXG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWREaXJlY3RNZXNzYWdlKG51bGwpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uU3RhdHVzQ2hhbmdlPXthc3luYyAoc3RhdHVzOiBzdHJpbmcsIHN0YXR1c01lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50VXNlcikgcmV0dXJuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IGFwaS51cGRhdGVVc2VyU3RhdHVzKGN1cnJlbnRVc2VyLmlkLCB7IHN0YXR1cywgc3RhdHVzTWVzc2FnZSB9KVxuICAgICAgICAgICAgICBzZXRVc2VycyhwcmV2ID0+IHByZXYubWFwKHVzZXIgPT4gXG4gICAgICAgICAgICAgICAgdXNlci5pZCA9PT0gY3VycmVudFVzZXIuaWQgXG4gICAgICAgICAgICAgICAgICA/IHsgLi4udXNlciwgc3RhdHVzLCBzdGF0dXNNZXNzYWdlIH1cbiAgICAgICAgICAgICAgICAgIDogdXNlclxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBzdGF0dXM6JywgZXJyb3IpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvblByb2ZpbGVJbWFnZUNoYW5nZT17YXN5bmMgKGZpbGU6IEZpbGUpID0+IHtcbiAgICAgICAgICAgIGlmICghY3VycmVudFVzZXIpIHJldHVyblxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IGFwaS51cGxvYWRQcm9maWxlSW1hZ2UoY3VycmVudFVzZXIuaWQsIGZpbGUpXG4gICAgICAgICAgICAgIHNldFVzZXJzKHByZXYgPT4gcHJldi5tYXAodXNlciA9PiBcbiAgICAgICAgICAgICAgICB1c2VyLmlkID09PSBjdXJyZW50VXNlci5pZCBcbiAgICAgICAgICAgICAgICAgID8geyAuLi51c2VyLCBwcm9maWxlSW1hZ2U6IHVwZGF0ZWRVc2VyLnByb2ZpbGVJbWFnZSB9XG4gICAgICAgICAgICAgICAgICA6IHVzZXJcbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgc2V0Q3VycmVudFVzZXIocHJldiA9PiBwcmV2ID8geyAuLi5wcmV2LCBwcm9maWxlSW1hZ2U6IHVwZGF0ZWRVc2VyLnByb2ZpbGVJbWFnZSB9IDogbnVsbClcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgcHJvZmlsZSBpbWFnZTonLCBlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uQWRkQ2hhbm5lbD17aGFuZGxlQWRkQ2hhbm5lbH1cbiAgICAgICAgICBvbkRlbGV0ZUNoYW5uZWw9eyhjaGFubmVsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHNldENoYW5uZWxzKHByZXYgPT4gcHJldi5maWx0ZXIoYyA9PiBjLm5hbWUgIT09IGNoYW5uZWwpKVxuICAgICAgICAgIH19XG4gICAgICAgICAgY3VycmVudFVzZXI9e2N1cnJlbnRVc2VyfVxuICAgICAgICAgIGRtTWVzc2FnZXM9e2RtTWVzc2FnZXN9XG4gICAgICAgICAgc2VsZWN0ZWRBdmF0YXI9e3NlbGVjdGVkQXZhdGFyfVxuICAgICAgICAgIG9uU2VsZWN0QXZhdGFyPXthc3luYyAoYXZhdGFyKSA9PiB7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZEF2YXRhcihhdmF0YXIpXG4gICAgICAgICAgICBzZXRTZWxlY3RlZENoYW5uZWwoJycpXG4gICAgICAgICAgICBzZXRTZWxlY3RlZERpcmVjdE1lc3NhZ2UobnVsbClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIHVzZXIgc3RhdHVzIHdoZW4gc2VsZWN0aW5nIGFuIGF2YXRhclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRVc2VyKSB7XG4gICAgICAgICAgICAgIGF3YWl0IGFwaS51cGRhdGVVc2VyU3RhdHVzKGN1cnJlbnRVc2VyLmlkLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgICAgICAgICBzdGF0dXNNZXNzYWdlOiBgQ2hhdHRpbmcgd2l0aCAke2F2YXRhcn1gLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBzZXRVc2VycyhwcmV2ID0+IHByZXYubWFwKHVzZXIgPT4gXG4gICAgICAgICAgICAgICAgdXNlci5pZCA9PT0gY3VycmVudFVzZXIuaWQgXG4gICAgICAgICAgICAgICAgICA/IHsgLi4udXNlciwgc3RhdHVzOiAnYWN0aXZlJywgc3RhdHVzTWVzc2FnZTogYENoYXR0aW5nIHdpdGggJHthdmF0YXJ9YCB9XG4gICAgICAgICAgICAgICAgICA6IHVzZXJcbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAgIG9uTG9nb3V0PXtoYW5kbGVMb2dvdXR9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTEgZmxleCBmbGV4LWNvbFwiPlxuICAgICAgICB7Y3VycmVudFVzZXIgJiYgKFxuICAgICAgICAgIDxIZWFkZXJcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbnM9e25vdGlmaWNhdGlvbnN9XG4gICAgICAgICAgICBjbGVhclNlYXJjaD17KCkgPT4gc2V0U2VhcmNoUmVzdWx0cyhudWxsKX1cbiAgICAgICAgICAgIGN1cnJlbnRVc2VyPXtjdXJyZW50VXNlcn1cbiAgICAgICAgICAgIG9uTG9nb3V0PXtoYW5kbGVMb2dvdXR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3NlYXJjaFJlc3VsdHMgPyAoXG4gICAgICAgICAgPFNlYXJjaFJlc3VsdHNcbiAgICAgICAgICAgIHJlc3VsdHM9e3NlYXJjaFJlc3VsdHN9XG4gICAgICAgICAgICBvblJlc3VsdENsaWNrPXtoYW5kbGVTZWFyY2hSZXN1bHRDbGlja31cbiAgICAgICAgICAgIG9uQ2xlYXJTZWFyY2g9eygpID0+IHNldFNlYXJjaFJlc3VsdHMobnVsbCl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBmbGV4XCI+XG4gICAgICAgICAgICA8Q2hhbm5lbFZpZXdcbiAgICAgICAgICAgICAgY2hhbm5lbD17c2VsZWN0ZWRDaGFubmVsID8gY2hhbm5lbHMuZmluZChjID0+IGMuaWQgPT09IHNlbGVjdGVkQ2hhbm5lbCk/Lm5hbWUgfHwgJycgOiAnJ31cbiAgICAgICAgICAgICAgZGlyZWN0TWVzc2FnZVVzZXI9e3NlbGVjdGVkRGlyZWN0TWVzc2FnZX1cbiAgICAgICAgICAgICAgYXZhdGFyQ2hhdD17c2VsZWN0ZWRBdmF0YXJ9XG4gICAgICAgICAgICAgIG1lc3NhZ2VzPXtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZENoYW5uZWxcbiAgICAgICAgICAgICAgICAgID8gY2hhbm5lbE1lc3NhZ2VzW3NlbGVjdGVkQ2hhbm5lbF0gfHwgW11cbiAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWREaXJlY3RNZXNzYWdlXG4gICAgICAgICAgICAgICAgICA/ICgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRVc2VyID0gdXNlcnMuZmluZCh1ID0+IHUubmFtZSA9PT0gc2VsZWN0ZWREaXJlY3RNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZWN0ZWRVc2VyIHx8ICFjdXJyZW50VXNlcikgcmV0dXJuIFtdXG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG1QYWlySWQgPSBbY3VycmVudFVzZXIuaWQsIHNlbGVjdGVkVXNlci5pZF0uc29ydCgpLmpvaW4oJ18nKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkbU1lc3NhZ2VzW2RtUGFpcklkXSB8fCBbXVxuICAgICAgICAgICAgICAgICAgICB9KSgpXG4gICAgICAgICAgICAgICAgICA6IHNlbGVjdGVkQXZhdGFyXG4gICAgICAgICAgICAgICAgICA/IGRtTWVzc2FnZXNbYGF2YXRhcl8ke3NlbGVjdGVkQXZhdGFyfWBdIHx8IFtdXG4gICAgICAgICAgICAgICAgICA6IFtdXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb25TZW5kTWVzc2FnZT17aGFuZGxlU2VuZE1lc3NhZ2V9XG4gICAgICAgICAgICAgIG9uUmVhY3Rpb249e2hhbmRsZVJlYWN0aW9ufVxuICAgICAgICAgICAgICBvblNlYXJjaD17aGFuZGxlU2VhcmNofVxuICAgICAgICAgICAgICBzZXRTZWxlY3RlZFRocmVhZD17KHRocmVhZElkOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRocmVhZElkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZFRocmVhZChudWxsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gRmV0Y2ggdGhyZWFkIGRhdGEgYW5kIHNldCBpdFxuICAgICAgICAgICAgICAgICAgYXBpLmdldFRocmVhZCh0aHJlYWRJZCkudGhlbih0aHJlYWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZFRocmVhZCh0aHJlYWQpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjdXJyZW50VXNlcj17Y3VycmVudFVzZXIhfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtzZWxlY3RlZFRocmVhZCAmJiAoXG4gICAgICAgICAgICAgIDxUaHJlYWRWaWV3XG4gICAgICAgICAgICAgICAgdGhyZWFkPXtzZWxlY3RlZFRocmVhZH1cbiAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRTZWxlY3RlZFRocmVhZChudWxsKX1cbiAgICAgICAgICAgICAgICBjdXJyZW50VXNlcj17Y3VycmVudFVzZXIhfVxuICAgICAgICAgICAgICAgIG9uU2VuZFJlcGx5PXthc3luYyAoY29udGVudDogc3RyaW5nLCBmaWxlPzogRmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50VXNlciB8fCAhc2VsZWN0ZWRUaHJlYWQ/Lm1lc3NhZ2VJZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBseSA9IGF3YWl0IGFwaS5zZW5kVGhyZWFkUmVwbHkoc2VsZWN0ZWRUaHJlYWQubWVzc2FnZUlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IGN1cnJlbnRVc2VyLmlkLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLihmaWxlID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmaWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpbGUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZFRocmVhZChwcmV2ID0+IHByZXYgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlczogWy4uLnByZXYubWVzc2FnZXMsIHJlcGx5XSxcbiAgICAgICAgICAgICAgICAgICAgfSA6IG51bGwpXG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2VuZCByZXBseTonLCBlcnJvcilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPFNlbGVjdFVzZXJEaWFsb2dcbiAgICAgICAgaXNPcGVuPXtpc1NlbGVjdFVzZXJEaWFsb2dPcGVufVxuICAgICAgICBvbkNsb3NlPXsoKSA9PiBzZXRJc1NlbGVjdFVzZXJEaWFsb2dPcGVuKGZhbHNlKX1cbiAgICAgICAgdXNlcnM9e3VzZXJzfVxuICAgICAgICBvblNlbGVjdFVzZXI9e2hhbmRsZVNlbGVjdFVzZXJ9XG4gICAgICAgIGN1cnJlbnRVc2VyPXtjdXJyZW50VXNlciF9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJvdXRlciIsInVzZVNlYXJjaFBhcmFtcyIsIlNpZGViYXIiLCJIZWFkZXIiLCJDaGFubmVsVmlldyIsIlRocmVhZFZpZXciLCJTZWFyY2hSZXN1bHRzIiwiU2VsZWN0VXNlckRpYWxvZyIsImFwaSIsIlNsYWNrSW50ZXJmYWNlIiwiY2hhbm5lbHMiLCJzZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImdldCIsInNldENoYW5uZWxzIiwic2VsZWN0ZWRDaGFubmVsIiwic2V0U2VsZWN0ZWRDaGFubmVsIiwic2VsZWN0ZWRUaHJlYWQiLCJzZXRTZWxlY3RlZFRocmVhZCIsInNlYXJjaFJlc3VsdHMiLCJzZXRTZWFyY2hSZXN1bHRzIiwiY2hhbm5lbE1lc3NhZ2VzIiwic2V0Q2hhbm5lbE1lc3NhZ2VzIiwiZG1NZXNzYWdlcyIsInNldERNTWVzc2FnZXMiLCJ1c2VycyIsInNldFVzZXJzIiwiY3VycmVudFVzZXIiLCJzZXRDdXJyZW50VXNlciIsIm5vdGlmaWNhdGlvbnMiLCJzZXROb3RpZmljYXRpb25zIiwic2VsZWN0ZWREaXJlY3RNZXNzYWdlIiwic2V0U2VsZWN0ZWREaXJlY3RNZXNzYWdlIiwiaXNTZWxlY3RVc2VyRGlhbG9nT3BlbiIsInNldElzU2VsZWN0VXNlckRpYWxvZ09wZW4iLCJzZWxlY3RlZEF2YXRhciIsInNldFNlbGVjdGVkQXZhdGFyIiwiZXhpc3RpbmdETXMiLCJzZXRFeGlzdGluZ0RNcyIsInJvdXRlciIsImZldGNoSW5pdGlhbERhdGEiLCJjaGFubmVsc0RhdGEiLCJ1c2Vyc0RhdGEiLCJQcm9taXNlIiwiYWxsIiwiZ2V0Q2hhbm5lbHMiLCJnZXRVc2VycyIsImxlbmd0aCIsImlkIiwiZXhpc3RpbmdVc2VyIiwiZmluZCIsInUiLCJuYW1lIiwiZG1QYWlycyIsImdldERNUGFpcnMiLCJuZXdVc2VyIiwiY3JlYXRlVXNlciIsInN0YXR1cyIsInN0YXR1c01lc3NhZ2UiLCJwcmV2IiwiZXJyb3IiLCJjb25zb2xlIiwiZmV0Y2hNZXNzYWdlcyIsIm1lc3NhZ2VzIiwiZ2V0TWVzc2FnZXMiLCJmZXRjaERNTWVzc2FnZXMiLCJzZWxlY3RlZFVzZXIiLCJ1c2VySWRzIiwic29ydCIsImRtUGFpcklkIiwidW5kZWZpbmVkIiwiZmV0Y2hBdmF0YXJNZXNzYWdlcyIsImF2YXRhcktleSIsImhhbmRsZVNlYXJjaCIsInF1ZXJ5IiwidHJpbSIsImxvd2VyY2FzZVF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJhbGxNZXNzYWdlcyIsIk9iamVjdCIsInZhbHVlcyIsImZsYXQiLCJyZXN1bHRzIiwiZmlsdGVyIiwibWVzc2FnZSIsImNvbnRlbnRNYXRjaCIsImNvbnRlbnQiLCJpbmNsdWRlcyIsImZpbGVuYW1lTWF0Y2giLCJmaWxlIiwiaGFuZGxlU2VhcmNoUmVzdWx0Q2xpY2siLCJyZXN1bHQiLCJjaGFubmVsIiwiZW50cmllcyIsInNvbWUiLCJtIiwiZG1LZXkiLCJ1c2VyMSIsInVzZXIyIiwic3BsaXQiLCJvdGhlclVzZXIiLCJoYW5kbGVTZW5kTWVzc2FnZSIsImZpbGVEYXRhIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInVwbG9hZFJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5Iiwib2siLCJqc29uIiwiRXJyb3IiLCJkZXRhaWxzIiwiZmlsZVVybCIsInR5cGUiLCJ1cmwiLCJ1cGRhdGVVc2VyU3RhdHVzIiwibWFwIiwidXNlciIsIm1lc3NhZ2VEYXRhIiwidXNlcklkIiwiY2hhbm5lbElkIiwiYXZhdGFySWQiLCJuZXdNZXNzYWdlIiwic2VuZE1lc3NhZ2UiLCJoYW5kbGVSZWFjdGlvbiIsIm1lc3NhZ2VJZCIsImVtb2ppIiwidG9nZ2xlUmVhY3Rpb24iLCJ1cGRhdGVNZXNzYWdlcyIsIm1zZyIsInJlYWN0aW9ucyIsInIiLCJoYW5kbGVBZGRDaGFubmVsIiwibG9nIiwibmV3Q2hhbm5lbCIsImNyZWF0ZUNoYW5uZWwiLCJoYW5kbGVBZGREaXJlY3RNZXNzYWdlIiwidXNlck5hbWUiLCJwYXJ0aWNpcGFudHMiLCJjaGFubmVsTmFtZSIsImpvaW4iLCJleGlzdGluZ0NoYW5uZWwiLCJjIiwiaGFuZGxlU2VsZWN0VXNlciIsImhhbmRsZUxvZ291dCIsInB1c2giLCJkaXYiLCJjbGFzc05hbWUiLCJpc0RNIiwic3RhcnRzV2l0aCIsIl8iLCJvblNlbGVjdERpcmVjdE1lc3NhZ2UiLCJvbkFkZERpcmVjdE1lc3NhZ2UiLCJvbkRlbGV0ZURpcmVjdE1lc3NhZ2UiLCJkbSIsIm9uU3RhdHVzQ2hhbmdlIiwib25Qcm9maWxlSW1hZ2VDaGFuZ2UiLCJ1cGRhdGVkVXNlciIsInVwbG9hZFByb2ZpbGVJbWFnZSIsInByb2ZpbGVJbWFnZSIsIm9uQWRkQ2hhbm5lbCIsIm9uRGVsZXRlQ2hhbm5lbCIsIm9uU2VsZWN0QXZhdGFyIiwiYXZhdGFyIiwib25Mb2dvdXQiLCJjbGVhclNlYXJjaCIsIm9uUmVzdWx0Q2xpY2siLCJvbkNsZWFyU2VhcmNoIiwiZGlyZWN0TWVzc2FnZVVzZXIiLCJhdmF0YXJDaGF0Iiwib25TZW5kTWVzc2FnZSIsIm9uUmVhY3Rpb24iLCJvblNlYXJjaCIsInRocmVhZElkIiwiZ2V0VGhyZWFkIiwidGhlbiIsInRocmVhZCIsIm9uQ2xvc2UiLCJvblNlbmRSZXBseSIsInJlcGx5Iiwic2VuZFRocmVhZFJlcGx5IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiaXNPcGVuIiwib25TZWxlY3RVc2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/slack-interface.tsx\n"));

/***/ })

});