"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/chat/page",{

/***/ "(app-pages-browser)/./components/slack-interface.tsx":
/*!****************************************!*\
  !*** ./components/slack-interface.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SlackInterface; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sidebar */ \"(app-pages-browser)/./components/sidebar.tsx\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header */ \"(app-pages-browser)/./components/header.tsx\");\n/* harmony import */ var _channel_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./channel-view */ \"(app-pages-browser)/./components/channel-view.tsx\");\n/* harmony import */ var _thread_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./thread-view */ \"(app-pages-browser)/./components/thread-view.tsx\");\n/* harmony import */ var _search_results__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./search-results */ \"(app-pages-browser)/./components/search-results.tsx\");\n/* harmony import */ var _select_user_dialog__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./select-user-dialog */ \"(app-pages-browser)/./components/select-user-dialog.tsx\");\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./lib/api.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\nfunction SlackInterface() {\n    var _channels_find, _channels_find1;\n    _s();\n    const searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams)();\n    const username = searchParams.get(\"username\");\n    const [channels, setChannels] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedChannel, setSelectedChannel] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [selectedThread, setSelectedThread] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [channelMessages, setChannelMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [dmMessages, setDMMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentUser, setCurrentUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedDirectMessage, setSelectedDirectMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isSelectUserDialogOpen, setIsSelectUserDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedAvatar, setSelectedAvatar] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [existingDMs, setExistingDMs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // Fetch initial data\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchInitialData = async ()=>{\n            try {\n                const [channelsData, usersData] = await Promise.all([\n                    _lib_api__WEBPACK_IMPORTED_MODULE_9__.getChannels(),\n                    _lib_api__WEBPACK_IMPORTED_MODULE_9__.getUsers()\n                ]);\n                setChannels(channelsData);\n                setUsers(usersData);\n                if (channelsData.length > 0) {\n                    setSelectedChannel(channelsData[0].id);\n                }\n                // Set current user (in a real app, this would come from authentication)\n                if (username) {\n                    const existingUser = usersData.find((u)=>u.name === username);\n                    if (existingUser) {\n                        setCurrentUser(existingUser);\n                        // Fetch existing DM pairs for the user\n                        const dmPairs = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getDMPairs(existingUser.id);\n                        setExistingDMs(dmPairs);\n                    } else {\n                        // Create a new user with the provided username\n                        const newUser = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createUser({\n                            name: username,\n                            status: \"online\",\n                            statusMessage: \"\"\n                        });\n                        setCurrentUser(newUser);\n                        setUsers((prev)=>[\n                                ...prev,\n                                newUser\n                            ]);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Failed to fetch initial data:\", error);\n            }\n        };\n        fetchInitialData();\n    }, []);\n    // Fetch messages when selected channel changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchMessages = async ()=>{\n            if (!selectedChannel || !currentUser) return;\n            try {\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(selectedChannel);\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch messages:\", error);\n            }\n        };\n        fetchMessages();\n    }, [\n        selectedChannel,\n        currentUser\n    ]);\n    // Fetch DM messages when selected user changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchDMMessages = async ()=>{\n            if (!selectedDirectMessage || !currentUser) return;\n            try {\n                // Find the selected user's ID\n                const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                if (!selectedUser) return;\n                // Sort user IDs to ensure consistent dmPairId regardless of who's viewing\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(undefined, dmPairId);\n                // Store messages using the same dmPairId as the key\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch DM messages:\", error);\n            }\n        };\n        fetchDMMessages();\n    }, [\n        selectedDirectMessage,\n        currentUser,\n        users\n    ]);\n    // Fetch avatar chat messages when selected avatar changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const fetchAvatarMessages = async ()=>{\n            if (!selectedAvatar || !currentUser) return;\n            try {\n                // Include userId in the avatarId to make it unique per user\n                const userSpecificAvatarId = \"\".concat(selectedAvatar, \"_\").concat(currentUser.id);\n                const messages = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.getMessages(undefined, undefined, userSpecificAvatarId);\n                const avatarKey = \"avatar_\".concat(userSpecificAvatarId);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [avatarKey]: messages\n                    }));\n            } catch (error) {\n                console.error(\"Failed to fetch avatar messages:\", error);\n            }\n        };\n        fetchAvatarMessages();\n    }, [\n        selectedAvatar,\n        currentUser\n    ]);\n    const handleSearch = (query)=>{\n        if (query.trim() === \"\") {\n            setSearchResults(null);\n            return;\n        }\n        const lowercaseQuery = query.toLowerCase();\n        const allMessages = [\n            ...Object.values(channelMessages).flat(),\n            ...Object.values(dmMessages).flat()\n        ];\n        const results = allMessages.filter((message)=>{\n            const contentMatch = message.content.toLowerCase().includes(lowercaseQuery);\n            const filenameMatch = message.file && message.file.name.toLowerCase().includes(lowercaseQuery);\n            return contentMatch || filenameMatch;\n        });\n        setSearchResults(results);\n    };\n    const handleSearchResultClick = (result)=>{\n        // Find the channel or DM containing this message\n        for (const [channel, messages] of Object.entries(channelMessages)){\n            if (messages.some((m)=>m.id === result.id)) {\n                setSelectedChannel(channel);\n                setSelectedDirectMessage(null);\n                setSearchResults(null);\n                return;\n            }\n        }\n        for (const [dmKey, messages] of Object.entries(dmMessages)){\n            if (messages.some((m)=>m.id === result.id)) {\n                const [user1, user2] = dmKey.split(\"_\");\n                const otherUser = user1 === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.name) ? user2 : user1;\n                setSelectedDirectMessage(otherUser);\n                setSelectedChannel(\"\");\n                setSearchResults(null);\n                return;\n            }\n        }\n    };\n    const handleSendMessage = async (content, file)=>{\n        if (!currentUser) return;\n        try {\n            let fileData;\n            if (file) {\n                // Create FormData and append file\n                const formData = new FormData();\n                formData.append(\"file\", file);\n                formData.append(\"filename\", file.name);\n                // Upload file first\n                const uploadResponse = await fetch(\"/api/files/upload\", {\n                    method: \"POST\",\n                    body: formData\n                });\n                if (!uploadResponse.ok) {\n                    const error = await uploadResponse.json();\n                    throw new Error(error.details || \"Failed to upload file\");\n                }\n                const { fileUrl } = await uploadResponse.json();\n                // Create file data structure\n                fileData = {\n                    name: file.name,\n                    type: file.type,\n                    url: fileUrl\n                };\n            }\n            // Update user status to show activity\n            if (currentUser && selectedAvatar) {\n                await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                    status: \"active\",\n                    statusMessage: \"Chatting with \".concat(selectedAvatar)\n                });\n                setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                            ...user,\n                            status: \"active\",\n                            statusMessage: \"Chatting with \".concat(selectedAvatar)\n                        } : user));\n            }\n            // Find the selected user's ID for DMs\n            const selectedUser = selectedDirectMessage ? users.find((u)=>u.name === selectedDirectMessage) : null;\n            // Construct message data\n            const messageData = {\n                content,\n                userId: currentUser.id,\n                ...selectedChannel ? {\n                    channelId: selectedChannel\n                } : {},\n                ...selectedDirectMessage && selectedUser ? {\n                    dmPairId: \"\".concat([\n                        currentUser.id,\n                        selectedUser.id\n                    ].sort()[0], \"_\").concat([\n                        currentUser.id,\n                        selectedUser.id\n                    ].sort()[1])\n                } : {},\n                ...selectedAvatar ? {\n                    avatarId: \"\".concat(selectedAvatar, \"_\").concat(currentUser.id)\n                } : {},\n                ...fileData ? {\n                    file: fileData\n                } : {}\n            };\n            const newMessage = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.sendMessage(messageData);\n            if (selectedChannel) {\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: [\n                            ...prev[selectedChannel] || [],\n                            newMessage\n                        ]\n                    }));\n            } else if (selectedDirectMessage && selectedUser) {\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: [\n                            ...prev[dmPairId] || [],\n                            newMessage\n                        ]\n                    }));\n            } else if (selectedAvatar) {\n                // Handle avatar chat messages\n                const avatarKey = \"avatar_\".concat(selectedAvatar);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [avatarKey]: [\n                            ...prev[avatarKey] || [],\n                            newMessage\n                        ]\n                    }));\n            }\n        } catch (error) {\n            console.error(\"Failed to send message:\", error);\n        }\n    };\n    const handleReaction = async (messageId, emoji)=>{\n        if (!currentUser) return;\n        try {\n            await _lib_api__WEBPACK_IMPORTED_MODULE_9__.toggleReaction({\n                messageId,\n                userId: currentUser.id,\n                emoji\n            });\n            // Update the UI optimistically\n            const updateMessages = (messages)=>messages.map((msg)=>msg.id === messageId ? {\n                        ...msg,\n                        reactions: msg.reactions.includes(emoji) ? msg.reactions.filter((r)=>r !== emoji) : [\n                            ...msg.reactions,\n                            emoji\n                        ]\n                    } : msg);\n            if (selectedChannel) {\n                setChannelMessages((prev)=>({\n                        ...prev,\n                        [selectedChannel]: updateMessages(prev[selectedChannel] || [])\n                    }));\n            } else if (selectedDirectMessage) {\n                const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                if (!selectedUser) return;\n                const userIds = [\n                    currentUser.id,\n                    selectedUser.id\n                ].sort();\n                const dmPairId = \"\".concat(userIds[0], \"_\").concat(userIds[1]);\n                setDMMessages((prev)=>({\n                        ...prev,\n                        [dmPairId]: updateMessages(prev[dmPairId] || [])\n                    }));\n            }\n        } catch (error) {\n            console.error(\"Failed to toggle reaction:\", error);\n        }\n    };\n    const handleAddChannel = async (name)=>{\n        try {\n            console.log(\"Attempting to create channel:\", name);\n            const newChannel = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createChannel(name);\n            console.log(\"Channel created successfully:\", newChannel);\n            setChannels((prev)=>[\n                    ...prev,\n                    newChannel\n                ]);\n            setSelectedChannel(newChannel.id);\n        } catch (error) {\n            console.error(\"Failed to create channel:\", error);\n        }\n    };\n    const handleAddDirectMessage = async (userName)=>{\n        if (!currentUser) return;\n        try {\n            // Find the selected user\n            const selectedUser = users.find((u)=>u.name === userName);\n            if (!selectedUser) return;\n            // Create a channel name for the DM that's consistent regardless of who creates it\n            const participants = [\n                currentUser.name,\n                userName\n            ].sort();\n            const channelName = \"dm_\".concat(participants.join(\"_\"));\n            // Check if the channel already exists\n            const existingChannel = channels.find((c)=>c.name === channelName);\n            if (existingChannel) {\n                setSelectedChannel(existingChannel.id);\n                setSelectedDirectMessage(userName);\n                return;\n            }\n            // Create a new channel for the DM\n            const newChannel = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.createChannel(channelName);\n            setChannels((prev)=>[\n                    ...prev,\n                    newChannel\n                ]);\n            setSelectedChannel(newChannel.id);\n            setSelectedDirectMessage(userName);\n            // Add to existing DMs list\n            setExistingDMs((prev)=>[\n                    ...prev,\n                    {\n                        userName\n                    }\n                ]);\n        } catch (error) {\n            console.error(\"Failed to create DM channel:\", error);\n        }\n    };\n    // Update the SelectUserDialog handler\n    const handleSelectUser = (userName)=>{\n        handleAddDirectMessage(userName);\n        setIsSelectUserDialogOpen(false);\n    };\n    // Add handleLogout function\n    const handleLogout = ()=>{\n        // Close any open dialogs\n        setIsSelectUserDialogOpen(false);\n        // Clear user state\n        setCurrentUser(null);\n        setChannelMessages({});\n        setDMMessages({});\n        setSelectedChannel(\"\");\n        setSelectedDirectMessage(null);\n        setSelectedThread(null);\n        setSearchResults(null);\n        // Redirect to login page\n        router.push(\"/\");\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex h-screen\",\n        children: [\n            currentUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sidebar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                channels: channels.map((c)=>({\n                        id: c.id,\n                        name: c.name,\n                        isDM: c.name.startsWith(\"dm_\")\n                    })),\n                users: users,\n                existingDMs: existingDMs,\n                selectedChannel: selectedChannel ? ((_channels_find = channels.find((c)=>c.id === selectedChannel)) === null || _channels_find === void 0 ? void 0 : _channels_find.name) || \"\" : \"\",\n                setSelectedChannel: async (channelName)=>{\n                    const channel = channels.find((c)=>c.name === channelName);\n                    if (channel) {\n                        setSelectedChannel(channel.id);\n                        // If it's a DM channel, set the selectedDirectMessage\n                        if (channel.name.startsWith(\"dm_\")) {\n                            const [_, ...participants] = channel.name.split(\"_\");\n                            const otherUser = participants.find((name)=>name !== currentUser.name);\n                            setSelectedDirectMessage(otherUser || null);\n                        } else {\n                            setSelectedDirectMessage(null);\n                        }\n                        setSelectedAvatar(null);\n                        // Reset user status when leaving avatar chat\n                        if (currentUser && selectedAvatar) {\n                            await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                                status: \"online\",\n                                statusMessage: \"\"\n                            });\n                            setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                        ...user,\n                                        status: \"online\",\n                                        statusMessage: \"\"\n                                    } : user));\n                        }\n                    }\n                },\n                selectedDirectMessage: selectedDirectMessage,\n                onSelectDirectMessage: handleSelectUser,\n                onAddDirectMessage: ()=>setIsSelectUserDialogOpen(true),\n                onDeleteDirectMessage: async (userName)=>{\n                    // Find the DM channel\n                    const participants = [\n                        currentUser.name,\n                        userName\n                    ].sort();\n                    const channelName = \"dm_\".concat(participants.join(\"_\"));\n                    const channel = channels.find((c)=>c.name === channelName);\n                    if (channel) {\n                        // Remove the channel\n                        setChannels((prev)=>prev.filter((c)=>c.id !== channel.id));\n                        // Remove from existingDMs\n                        setExistingDMs((prev)=>prev.filter((dm)=>dm.userName !== userName));\n                        // Clear selection if needed\n                        if (selectedChannel === channel.id) {\n                            setSelectedChannel(\"\");\n                            setSelectedDirectMessage(null);\n                        }\n                    }\n                },\n                onStatusChange: async (status, statusMessage)=>{\n                    if (!currentUser) return;\n                    try {\n                        await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                            status,\n                            statusMessage\n                        });\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    status,\n                                    statusMessage\n                                } : user));\n                    } catch (error) {\n                        console.error(\"Failed to update status:\", error);\n                    }\n                },\n                onProfileImageChange: async (file)=>{\n                    if (!currentUser) return;\n                    try {\n                        const updatedUser = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.uploadProfileImage(currentUser.id, file);\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    profileImage: updatedUser.profileImage\n                                } : user));\n                        setCurrentUser((prev)=>prev ? {\n                                ...prev,\n                                profileImage: updatedUser.profileImage\n                            } : null);\n                    } catch (error) {\n                        console.error(\"Failed to update profile image:\", error);\n                    }\n                },\n                onAddChannel: handleAddChannel,\n                onDeleteChannel: (channel)=>{\n                    setChannels((prev)=>prev.filter((c)=>c.name !== channel));\n                },\n                currentUser: currentUser,\n                dmMessages: dmMessages,\n                selectedAvatar: selectedAvatar,\n                onSelectAvatar: async (avatar)=>{\n                    setSelectedAvatar(avatar);\n                    setSelectedChannel(\"\");\n                    setSelectedDirectMessage(null);\n                    // Update user status when selecting an avatar\n                    if (currentUser) {\n                        await _lib_api__WEBPACK_IMPORTED_MODULE_9__.updateUserStatus(currentUser.id, {\n                            status: \"active\",\n                            statusMessage: \"Chatting with \".concat(avatar)\n                        });\n                        setUsers((prev)=>prev.map((user)=>user.id === currentUser.id ? {\n                                    ...user,\n                                    status: \"active\",\n                                    statusMessage: \"Chatting with \".concat(avatar)\n                                } : user));\n                    }\n                },\n                onLogout: handleLogout\n            }, void 0, false, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 402,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-1 flex flex-col\",\n                children: [\n                    currentUser && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_header__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                        notifications: notifications,\n                        clearSearch: ()=>setSearchResults(null),\n                        currentUser: currentUser,\n                        onLogout: handleLogout\n                    }, void 0, false, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 519,\n                        columnNumber: 11\n                    }, this),\n                    searchResults ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_search_results__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                        results: searchResults,\n                        onResultClick: handleSearchResultClick,\n                        onClearSearch: ()=>setSearchResults(null)\n                    }, void 0, false, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 527,\n                        columnNumber: 11\n                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"flex-1 flex\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_channel_view__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                channel: selectedChannel ? ((_channels_find1 = channels.find((c)=>c.id === selectedChannel)) === null || _channels_find1 === void 0 ? void 0 : _channels_find1.name) || \"\" : \"\",\n                                directMessageUser: selectedDirectMessage,\n                                avatarChat: selectedAvatar,\n                                messages: selectedChannel ? channelMessages[selectedChannel] || [] : selectedDirectMessage ? (()=>{\n                                    const selectedUser = users.find((u)=>u.name === selectedDirectMessage);\n                                    if (!selectedUser || !currentUser) return [];\n                                    const dmPairId = [\n                                        currentUser.id,\n                                        selectedUser.id\n                                    ].sort().join(\"_\");\n                                    return dmMessages[dmPairId] || [];\n                                })() : selectedAvatar && currentUser ? dmMessages[\"avatar_\".concat(selectedAvatar, \"_\").concat(currentUser.id)] || [] : [],\n                                onSendMessage: handleSendMessage,\n                                onReaction: handleReaction,\n                                onSearch: handleSearch,\n                                setSelectedThread: (threadId)=>{\n                                    if (threadId === null) {\n                                        setSelectedThread(null);\n                                    } else {\n                                        // Fetch thread data and set it\n                                        _lib_api__WEBPACK_IMPORTED_MODULE_9__.getThread(threadId).then((thread)=>{\n                                            setSelectedThread(thread);\n                                        });\n                                    }\n                                },\n                                currentUser: currentUser\n                            }, void 0, false, {\n                                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                                lineNumber: 534,\n                                columnNumber: 13\n                            }, this),\n                            selectedThread && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_thread_view__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                thread: selectedThread,\n                                onClose: ()=>setSelectedThread(null),\n                                currentUser: currentUser,\n                                onSendReply: async (content, file)=>{\n                                    if (!currentUser || !(selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messageId)) return;\n                                    try {\n                                        const reply = await _lib_api__WEBPACK_IMPORTED_MODULE_9__.sendThreadReply(selectedThread.messageId, {\n                                            content,\n                                            userId: currentUser.id,\n                                            ...file ? {\n                                                file: {\n                                                    name: file.name,\n                                                    type: file.type,\n                                                    url: URL.createObjectURL(file)\n                                                }\n                                            } : {}\n                                        });\n                                        setSelectedThread((prev)=>prev ? {\n                                                ...prev,\n                                                messages: [\n                                                    ...prev.messages,\n                                                    reply\n                                                ]\n                                            } : null);\n                                    } catch (error) {\n                                        console.error(\"Failed to send reply:\", error);\n                                    }\n                                }\n                            }, void 0, false, {\n                                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                                lineNumber: 568,\n                                columnNumber: 15\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                        lineNumber: 533,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 517,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_select_user_dialog__WEBPACK_IMPORTED_MODULE_8__.SelectUserDialog, {\n                isOpen: isSelectUserDialogOpen,\n                onClose: ()=>setIsSelectUserDialogOpen(false),\n                users: users,\n                onSelectUser: handleSelectUser,\n                currentUser: currentUser\n            }, void 0, false, {\n                fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n                lineNumber: 599,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/christiancattaneo/Projects/slack-interface/components/slack-interface.tsx\",\n        lineNumber: 400,\n        columnNumber: 5\n    }, this);\n}\n_s(SlackInterface, \"1EjqdfIx5JdLtPCCNT4I142FQ1U=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useSearchParams,\n        next_navigation__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = SlackInterface;\nvar _c;\n$RefreshReg$(_c, \"SlackInterface\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/slack-interface.tsx\n"));

/***/ })

});